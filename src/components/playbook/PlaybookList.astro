---
import PlaybookPost from './PlaybookPost.astro';
import type { CollectionEntry } from 'astro:content';
import { tags } from '../../data/tags';
import { getCollection } from 'astro:content';

interface Props {
  posts: CollectionEntry<'playbook'>[];
  currentCategory?: string;
}

const { posts, currentCategory } = Astro.props;

// Load all playbooks and apply publish visibility filter
const allPlaybooks = await getCollection('playbook', ({ data }) => {
  return import.meta.env.DEV || data.publish !== false;
});

// Filter only categories that are actually used
const activeCategories = tags.filter((tags) =>
  allPlaybooks.some((post) => post.data.tags?.includes(tags.name))
);
---

<section class="site-container mx-auto px-4 py-base text-[var(--color-body)]">
  <div
    class="mb-16 flex flex-col sm:flex-row sm:justify-between sm:items-end gap-8"
    data-aos="fade-in"
    data-aos-delay="100"
  >
    <div class="w-full">
      <h2 class="text-xl font-semibold tracking-tight text-[var(--color-headline)] mb-4">
        Filter by Categories:
      </h2>

      <div class="flex flex-wrap gap-2 items-center">
        <a
          href="/playbook"
          class={`px-4 sm:px-6 py-2 sm:py-3 leading-none rounded-full text-sm font-medium border transition-all duration-200 motion-safe:hover:scale-[1.03] ${
            !currentCategory
              ? 'bg-primary text-black dark:text-white shadow-sm'
              : 'bg-transparent text-[var(--color-body-light)] border-[var(--color-border)] hover:bg-[var(--color-surface-2)] hover:text-[var(--color-body)]'
          }`}
        >
          Show All
        </a>

        {activeCategories.map((tags) => (
          <a
            href={`/category/${tags.slug}`}
            title={tags.description}
            class={`px-4 sm:px-5 py-2 rounded-full text-sm font-medium border transition-all duration-200 motion-safe:hover:scale-[1.03] ${
              currentCategory === tags.slug
                ? 'bg-primary text-black dark:text-white shadow-sm'
                : 'bg-transparent text-[var(--color-body-light)] border-[var(--color-border)] hover:bg-[var(--color-surface-2)] hover:text-[var(--color-body)]'
            }`}
          >
            {tags.name}
          </a>
        ))}
      </div>
    </div>

    <p class="text-sm text-[var(--color-body-light)] text-left sm:text-right whitespace-nowrap">
      Showing <span class="font-semibold text-primary">{posts.length}</span> of
      <span class="font-semibold text-primary"> {allPlaybooks.length}</span> playbooks
    </p>
  </div>

  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    {posts.map((post, index) => (
      <div>
        <PlaybookPost
          title={post.data.title}
          excerpt={post.data.excerpt}
          featuredImage={post.data.featuredImage || ''}
          publishDate={post.data.publishDate}
          categories={post.data.tags || []}
          slug={post.data.slug || post.id}
          index={index}
        />
      </div>
    ))}
  </div>

  {posts.length === 0 && (
    <p class="text-center text-[var(--color-body-light)] py-8 italic">
      No playbooks found in this category.
    </p>
  )}
</section>
